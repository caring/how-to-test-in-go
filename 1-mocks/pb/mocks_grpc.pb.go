// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MockServiceClient is the client API for MockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MockServiceClient interface {
	FizzBuzz(ctx context.Context, in *FizzBuzzRequest, opts ...grpc.CallOption) (*FizzBuzzResponse, error)
}

type mockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMockServiceClient(cc grpc.ClientConnInterface) MockServiceClient {
	return &mockServiceClient{cc}
}

func (c *mockServiceClient) FizzBuzz(ctx context.Context, in *FizzBuzzRequest, opts ...grpc.CallOption) (*FizzBuzzResponse, error) {
	out := new(FizzBuzzResponse)
	err := c.cc.Invoke(ctx, "/mocks.MockService/FizzBuzz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MockServiceServer is the server API for MockService service.
// All implementations must embed UnimplementedMockServiceServer
// for forward compatibility
type MockServiceServer interface {
	FizzBuzz(context.Context, *FizzBuzzRequest) (*FizzBuzzResponse, error)
	mustEmbedUnimplementedMockServiceServer()
}

// UnimplementedMockServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMockServiceServer struct {
}

func (UnimplementedMockServiceServer) FizzBuzz(context.Context, *FizzBuzzRequest) (*FizzBuzzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FizzBuzz not implemented")
}
func (UnimplementedMockServiceServer) mustEmbedUnimplementedMockServiceServer() {}

// UnsafeMockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MockServiceServer will
// result in compilation errors.
type UnsafeMockServiceServer interface {
	mustEmbedUnimplementedMockServiceServer()
}

func RegisterMockServiceServer(s grpc.ServiceRegistrar, srv MockServiceServer) {
	s.RegisterService(&MockService_ServiceDesc, srv)
}

func _MockService_FizzBuzz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FizzBuzzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockServiceServer).FizzBuzz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mocks.MockService/FizzBuzz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockServiceServer).FizzBuzz(ctx, req.(*FizzBuzzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MockService_ServiceDesc is the grpc.ServiceDesc for MockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mocks.MockService",
	HandlerType: (*MockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FizzBuzz",
			Handler:    _MockService_FizzBuzz_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mocks.proto",
}
