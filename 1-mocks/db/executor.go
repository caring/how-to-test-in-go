// Code generated by github.com/caring/progenitor. DO NOT EDIT.
// Any changes made to this file will be overwritten when regenerated.
// Progenitor template version: v0.2.0-alpha.20

package db

import (
	"context"
	"database/sql"
	logging "github.com/caring/gopkg-logging"
)

type QueryExecutor interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func ExecContext(ctx context.Context, log *logging.Logger, exec QueryExecutor, qry string, args ...interface{}) (sql.Result, error) {
	log.Debug("executing ExecContext", logging.String("query", qry), logging.Any("args", args))
	return exec.ExecContext(ctx, qry, args...)
}

func QueryContext(ctx context.Context, log *logging.Logger, exec QueryExecutor, qry string, args ...interface{}) (*sql.Rows, error) {
	log.Debug("executing QueryContext", logging.String("query", qry), logging.Any("args", args))
	return exec.QueryContext(ctx, qry, args...)
}

func QueryRowContext(ctx context.Context, log *logging.Logger, exec QueryExecutor, qry string, args ...interface{}) *sql.Row {
	log.Debug("executing QueryRowContext", logging.String("query", qry), logging.Any("args", args))
	return exec.QueryRowContext(ctx, qry, args...)
}
