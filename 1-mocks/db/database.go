// Code generated by github.com/caring/progenitor. DO NOT EDIT.
// Any changes made to this file will be overwritten when regenerated.
// Progenitor template version: v0.2.0-alpha.20

package db

import (
	"context"
	"database/sql"
	"time"

	errors "github.com/caring/gopkg-errors"

	// anonymous import for side effects only
	_ "github.com/go-sql-driver/mysql"
)

type Option func(*sql.DB)

// these are options that can get passed in
func WithConnMaxIdleTime(d time.Duration) Option {
	return func(db *sql.DB) {
		db.SetConnMaxIdleTime(d)
	}
}
func WithConnMaxLifetime(d time.Duration) Option {
	return func(db *sql.DB) {
		db.SetConnMaxLifetime(d)
	}
}
func WithMaxIdleConns(i int) Option {
	return func(db *sql.DB) {
		db.SetMaxIdleConns(i)
	}
}
func WithMaxOpenConns(i int) Option {
	return func(db *sql.DB) {
		db.SetMaxOpenConns(i)
	}
}

// Open will give a pointer to a MySQL instance ready to run queries against.
func Open(dataSourceName string, options ...Option) (*sql.DB, error) {
	db, err := sql.Open("mysql", dataSourceName)
	if err != nil {
		return nil, errors.WithStack(err)
	}

	for _, option := range options {
		option(db)
	}

	err = db.Ping()
	if err != nil {
		return nil, errors.WithStack(err)
	}

	return db, nil
}

// Close will close the connection to the underlying database
func Close(db *sql.DB) error {
	err := db.Close()
	if err != nil {
		return errors.WithStack(err)
	}
	return nil
}

// Ping will check the connection to the underlying database
func Ping(ctx context.Context, db *sql.DB) error {
	if err := db.PingContext(ctx); err != nil {
		return err
	}
	return nil
}
